<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[up-9-15]]></title>
      <url>http://yoursite.com/2016/09/15/up-9-15/</url>
      <content type="html"><![CDATA[<h2 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>某些场景：<br>正改着代码，然后有个bug.</p>
<ul>
<li>使用stash保存现在的代码 –&gt; 新代码没有提交；工作区恢复为原状。</li>
<li>修改bug,并提交新代码。</li>
<li>恢复stash的代码。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git stash</div><div class="line">git stash list</div><div class="line">git stash pop</div><div class="line">git stash pop stash@&#123;num&#125; # 是你要恢复的操作的序号</div><div class="line">git stash clear # 清理不必要的stash</div></pre></td></tr></table></figure>
<h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>如果新修改的代码 跟 stash 修改的代码有冲突。<br>git会提示先提交最新的修改。再执行stash, 会实现代码合并。</p>
<hr>
<h2 id="vim-查找"><a href="#vim-查找" class="headerlink" title="vim 查找"></a>vim 查找</h2><p>用vim打开文件，需要搜索某个字符串。</p>
<ul>
<li>:/str enter  –&gt;  输入</li>
<li>按 n 向下搜索。 按 N 向上搜索。</li>
<li>:/^str enter –&gt; 搜索行首字符串</li>
<li>:/str$ enter –&gt; 搜索行尾字符串</li>
</ul>
<a id="more"></a>
<hr>
<h2 id="遍历文件夹"><a href="#遍历文件夹" class="headerlink" title="遍历文件夹"></a>遍历文件夹</h2><p>今天，想整理一下文件。把分散在各个文件夹的图片合并成在一个文件夹里面。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">for dir in */;</div><div class="line">do</div><div class="line">  echo $dir;</div><div class="line">  mv $dir/* all_images;</div><div class="line">done</div></pre></td></tr></table></figure>
<h2 id="删除空文件夹"><a href="#删除空文件夹" class="headerlink" title="删除空文件夹"></a>删除空文件夹</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">find /my_floder -type d -empty -delete</div><div class="line"></div><div class="line">其中：</div><div class="line">  -type d  =&gt; 类型为文件夹</div><div class="line">  -empty   =&gt; 空文件夹</div><div class="line">  -delete  =&gt; 删除</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[pry小问题]]></title>
      <url>http://yoursite.com/2016/09/01/pry%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>最近遇到一个小问题：</p>
<p>平时进行项目断点调试的时候，都是使用pry的。突然有一天，发现rails项目 跟 ruby项目不能同时进行断点。</p>
<p>解决方案：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">gem list pry # 查看一下相关包</div><div class="line"></div><div class="line"># 把一些类似pry-byebug, pry-rails卸载掉。</div><div class="line">gem uninstall pry-byebug</div><div class="line">gem uninstall pry-rails</div><div class="line"></div><div class="line"># 只保留 pry,pry-nav</div><div class="line"># 这样子就rails项目 跟 ruby项目都可以正常使用了。</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[concern]]></title>
      <url>http://yoursite.com/2016/08/29/concern/</url>
      <content type="html"><![CDATA[<p>concern的通用模式。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">module</span></span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">included</span><span class="params">(base)</span></span></div><div class="line">        base.send(<span class="symbol">:include</span>, InstanceMethods)</div><div class="line"></div><div class="line">        base.extend(ClassMethods)</div><div class="line"></div><div class="line">        base.eval_class <span class="keyword">do</span></div><div class="line">            scope <span class="symbol">:active</span>, where(<span class="symbol">is_active:</span> <span class="literal">true</span>)</div><div class="line">        <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">module</span> <span class="title">InstanceMethods</span></span></div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">module</span> <span class="title">ClassMethods</span></span></div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[redis incr]]></title>
      <url>http://yoursite.com/2016/07/21/redis-incr/</url>
      <content type="html"><![CDATA[<p>redis incr key</p>
<ul>
<li>原子性（atomicity）：一个事务是一个不可分割的最小工作单位，事务中包括的诸操作要么都做，要么都不做。</li>
<li>Redis所有单个命令的执行都是<code>原子性</code>的，这与它的<code>单线程机制</code>有关；</li>
<li>Redis命令的原子性使得我们<code>不用考虑并发问题</code>，可以方便的利用原子性自增操作INCR实现简单计数器功能;</li>
</ul>
<p><a href="http://www.yunsonbai.top/2016/05/20/redis-incr/" target="_blank" rel="external">http://www.yunsonbai.top/2016/05/20/redis-incr/</a><br><a href="http://www.kuqin.com/shuoit/20150104/344227.html" target="_blank" rel="external">http://www.kuqin.com/shuoit/20150104/344227.html</a><br><a href="https://segmentfault.com/q/1010000005075072" target="_blank" rel="external">https://segmentfault.com/q/1010000005075072</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[乐观锁与悲观锁]]></title>
      <url>http://yoursite.com/2016/07/14/%E4%B9%90%E8%A7%82%E9%94%81%E4%B8%8E%E6%82%B2%E8%A7%82%E9%94%81/</url>
      <content type="html"><![CDATA[<p>乐观锁：其实没在数据库层面加锁，而是利用多版本号来控制并发。如果事务提交后，发现提交的版本号与数据库里面的版本号不一样（说明已经被修改过），提交失败。<br>需要给数据表加入一个字段，用来表示版本。（Rails是:lock_version,可以修改名称。）<br>需要注意的是，当使用乐观锁后提交事务失败后，可以进行重试来重新更新。</p>
<p>(Rails 中乐观锁与悲观锁的使用)[<a href="https://ruby-china.org/topics/28963" target="_blank" rel="external">https://ruby-china.org/topics/28963</a>]<br>(乐观锁与悲观锁的区别)[<a href="http://www.cnblogs.com/Bob-FD/p/3352216.html" target="_blank" rel="external">http://www.cnblogs.com/Bob-FD/p/3352216.html</a>]</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue Learning]]></title>
      <url>http://yoursite.com/2016/07/13/Vue-Learning/</url>
      <content type="html"><![CDATA[<p>偷偷学看点Vue，了解一下用法。</p>
<p>一些js的方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- trim() : 清掉空格。</div><div class="line">- splice(index, howmany, item1,.....,itemX): 从index位置起，删除几个，后面添加介个。</div></pre></td></tr></table></figure></p>
<p>每个 Vue 实例都会代理其 data 对象里所有的属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var data = &#123; a: 1 &#125;</div><div class="line">var vm = new Vue(&#123;</div><div class="line">  data: data</div><div class="line">&#125;)</div><div class="line"></div><div class="line">vm.a === data.a // -&gt; true</div><div class="line"></div><div class="line">// 设置属性也会影响到原始数据</div><div class="line">vm.a = 2</div><div class="line">data.a // -&gt; 2</div><div class="line"></div><div class="line">// ... 反之亦然</div><div class="line">data.a = 3</div><div class="line">vm.a // -&gt; 3</div></pre></td></tr></table></figure></p>
<p>只有这些被代理的属性是响应的。如果在实例创建之后添加新的属性到实例上，它不会触发视图更新。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[for CSS]]></title>
      <url>http://yoursite.com/2016/07/08/for-CSS/</url>
      <content type="html"><![CDATA[<p>记录一下。</p>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><ul>
<li>X Y ==&gt; <code>后代选择</code></li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</div><div class="line">    <span class="attribute">text-decoration</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>X + Y ==&gt; <code>相邻选择</code><br>只选择紧贴在X元素之后Y元素。上面的例子，仅每一个ul之后的第一个段落元素的文本为红色。</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ul</span> + <span class="selector-tag">p</span> &#123;</div><div class="line">   <span class="attribute">color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>X &gt; Y ==&gt; <code>直接子代</code><br>X Y和X &gt; Y之间的不同点是后者只选择直接子代。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-id">#container</span> &gt; <span class="selector-tag">ul</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>X ~ Y<br>兄弟选择符和X + Y一样，然而，它没有约束。与相邻选择符（ul + li）仅选择前一个选择符后面的第一个元素比起来，兄弟选择符更宽泛。它会选择跟在ul后面的任何p元素。</p>
</li>
</ul>
<hr>
<p>使用了 a:visited改变样式。<br>会改变所有相同url的a标签。</p>
<p>一开始接触的时候a标签都href = ‘#’ , 点一个导致全部都被替换了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[focus]]></title>
      <url>http://yoursite.com/2016/07/07/focus/</url>
      <content type="html"><![CDATA[<p>每天晚上好好专注一个小时。</p>
<p>HTML元素都是小盒子。<br>重置样式表，跨浏览器。</p>
<p>上下的margin取决于大的（会重叠）<br>左右的margin直接叠加。</p>
<p>上下的margin一般使用em作为单位， 左右的margin使用px.<br>em会随字体的变大而变大，px不会。<br>左右margin使用px的原因是不会改变布局宽度。</p>
<p>块级元素， 如果没有显示设置width， 默认是auto – 与父元素同宽。</p>
<blockquote>
<p>没有设置width的元素，始终会填满其父元素的宽度。添加边框 + 内边距 + 外边距会使内容宽度减少。</p>
</blockquote>
<p>设置了width之后，不会与父级同宽。width针对的是内容区宽度。</p>
<blockquote>
<p>因为在多栏布局中,每一栏都必须时刻维护自己的宽度。有width 跟没width是有截然不同的表现的。</p>
</blockquote>
<h2 id="浮动，-清除"><a href="#浮动，-清除" class="headerlink" title="浮动， 清除"></a>浮动， 清除</h2><p>就是把元素从常规文档流脱离出来。可以用来干嘛：</p>
<ul>
<li>实现文字绕排图片的效果。</li>
<li>让原来<code>上下堆叠的块级元素</code>，变成<code>左右并列</code>。</li>
</ul>
<p>浮动元素脱离了常规文档流之后，原来紧跟在其后的元素在空间允许下，会向上提升到与浮动元素平起平坐。</p>
<blockquote>
<p>这里摘录 Eric 在那本书里写的一句话:“当你浮动一个元素的时候……这些(浮动)规则就好像 在说:‘尽量把这个元素往上放,能放多高放多高,直到碰到某个元素的边界为 止。’</p>
</blockquote>
<p>同时浮动图片和“有宽度的”段落,会导致段落的文本绕排效果消失,而浮 动的段落也会尽可能向左向上移动。就这样,这个段落就构成了紧挨着图片的一栏。 这就是使用 float 属性创建多栏布局的原理。换句话说,如果几个相邻的元素都具 有设定的宽度,都是浮动的,而且水平空间也足以容纳它们,它们就会并列排在 一行。</p>
<h2 id="文档流"><a href="#文档流" class="headerlink" title="文档流"></a>文档流</h2><blockquote>
<p>浮动(float)、绝对定位(absolute)、固定定位(fixed)三种方式定位会脱离文档流。</p>
</blockquote>
<h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><p>block + inline + none</p>
<p>inline<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a </div><div class="line">span</div></pre></td></tr></table></figure></p>
<p>none<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">把 display 设置成 none 不会保留元素本该显示的空间，但是 visibility: hidden; 还会保留</div></pre></td></tr></table></figure></p>
<h2 id="position"><a href="#position" class="headerlink" title="position"></a>position</h2><p>核心点。</p>
<p>static + relative + asolute + fixed</p>
<p>relative<br>相对它原来在文档流中的位置。原来的位置还存在。而显示跑到别的地方去了。<br>top: 30px; 就是在原先的top上加上30px,相当于往下移。<br>left: 40px; 就是在原先的left上加40px,相当于右移。 </p>
<p>asolute + fixed<br>会完全脱离文档流。原来的位置不见了。</p>
<p>相对自己。<br>相对另一个元素（上下文元素），asolute<br>相对屏幕视口。， fixed</p>
<h3 id="定位上下文"><a href="#定位上下文" class="headerlink" title="定位上下文"></a>定位上下文</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">给祖先元素定义 position: relative</div></pre></td></tr></table></figure>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>font-family –&gt; 字体族。<br>font-size<br>font-style –&gt; 斜体， 正体， 还是 normal</p>
<h3 id="font-size"><a href="#font-size" class="headerlink" title="font-size"></a>font-size</h3><h3 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h3><p>绝对单位： px<br>相对单位： em, 百分比</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">默认情况下： 1em = 16px</div></pre></td></tr></table></figure>
<h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p>掌握三栏布局。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[有趣的事情]]></title>
      <url>http://yoursite.com/2016/07/05/%E6%9C%89%E8%B6%A3%E7%9A%84%E4%BA%8B%E6%83%85/</url>
      <content type="html"><![CDATA[<h2 id="长城"><a href="#长城" class="headerlink" title="长城"></a>长城</h2><blockquote>
<p>长城最大的军事价值在于，如果没有这样一道工事，即使军事力量占优，以主动出击的方式惩戒蛮族人，也很难收到制止对方零星入侵抢劫的效果。</p>
</blockquote>
<p>所以，主要在于制止小偷小摸。</p>
<p>我在想，自己也应该建立一条属于自己的长城，不让那些小诱惑乘机而入。</p>
<h2 id="万历十五年"><a href="#万历十五年" class="headerlink" title="万历十五年"></a>万历十五年</h2><p>使用网易云音乐来听主播，上班路上听听《万历十五年》。<br>黄仁宇的这本书，开创中国历史书的新格局。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[传说]]></title>
      <url>http://yoursite.com/2016/07/03/%E4%BC%A0%E8%AF%B4/</url>
      <content type="html"><![CDATA[<p>在北美有个部落，他们相信世界上的一切生灵都存在灵魂。<br>它是一种缩小了的依附在躯体内的原我。</p>
<p>鹿的体内还有一头小鹿，人的体内也有一个小人。<br>当大的躯体死去时，小的原我依然活着。<br>它会投胎到附近的某种生物里，或者去到月亮那里，等待月亮把它送回地球。</p>
<p>有时候，月亮因忙于新的灵魂的降世，于是便从空中消失了。<br>所以有的夜晚没有月光，但最终，月亮是要回来的，就像我们每个人一样。</p>
<a id="more"></a>
<hr>
<p>我禁不住，想你再说一遍，<br>我试着把这些记下来，<br>但我找不到一只笔来描述。</p>
<p>千万年过去了，我独自一人，看世间变化。<br>深爱的人都不见了。<br>但令我最难过的是，曾经最美好的记忆被时间慢慢偷走。</p>
<p>直到最后。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一只神奇的猪]]></title>
      <url>http://yoursite.com/2016/07/03/%E4%B8%80%E5%8F%AA%E7%A5%9E%E5%A5%87%E7%9A%84%E7%8C%AA/</url>
      <content type="html"><![CDATA[<p>你的表现，总是完美得令人无话可说。<br><a id="more"></a></p>
<h2 id="礼物"><a href="#礼物" class="headerlink" title="礼物"></a>礼物</h2><p>很多时候，我打电话过去。<br>她刚好不在。</p>
<p>过了几秒，就反打回来。</p>
<p>时时默契，我把这个也当作礼物。</p>
<h2 id="打羽毛球"><a href="#打羽毛球" class="headerlink" title="打羽毛球"></a>打羽毛球</h2><p>我问她：打羽毛球打得酸不酸？</p>
<p>她很气愤的说：我七点半才去，打了还没20分钟。<br>接着说：然后我们就去吃大餐了。 —— 自己给笑了。<br>又自豪地说：不过我有节制的，没吃那么多。</p>
<p>我刚要表扬她终于想通了。<br>她立马接着说：因为我要留着肚子周末去广州大吃。。。</p>
<p>这套路太深。</p>
<h2 id="小贴心"><a href="#小贴心" class="headerlink" title="小贴心"></a>小贴心</h2><p>我在看巴萨的录像。</p>
<p>出去一下。</p>
<p>她随手就把录像给暂停了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[光速不变，那就不变]]></title>
      <url>http://yoursite.com/2016/07/03/%E5%85%89%E9%80%9F%E4%B8%8D%E5%8F%98%EF%BC%8C%E9%82%A3%E5%B0%B1%E4%B8%8D%E5%8F%98/</url>
      <content type="html"><![CDATA[<p>你什么时候成了热核天体物理学家了?<br>托尼斯塔克：昨天晚上。</p>
<p>我装逼小王子 —— 钢铁侠又回来了。<br>tony对着一群记者说：I am iron-man.<br><a id="more"></a></p>
<hr>
<p>洪水退去，地面一片狼藉。</p>
<p>1905年。爱因斯坦在相对论、量子力学和分子运动理论做出了开创性的工作。</p>
<ul>
<li>《分子大小的新测量》 —— 提出测量分子大小和阿伏伽德罗常数的新方法。</li>
<li>《热的分子运动论所要求的静止液体中悬浮小粒子的运动》 —— 讨论布朗运动。</li>
<li>《关于光的产生和转化的一个试探性观点》 —— 光电效应。</li>
<li>《论动体的电动力学》 —— 提出狭义相对论，没有参考文献。</li>
<li>《物质的惯性同它所含的能量有关吗》—— E = mc2</li>
</ul>
<hr>
<p>遇到一些难搞的东西，就得先进行假设。<br>A用 3个假设条件，得出一个结论。<br>B用 1个假设条件，得出相同的结论。</p>
<p>那么，我们应该相信较简单，假设较少的那么。 —— <code>奥卡姆剃刀原理</code>。</p>
<p>先来瞄一瞄伽利略的变换性原理 —— <code>速度相加原理</code>。<br>我站在地上射出一道光，光的速度是c.<br>我坐在一个10m/s的车上射出一道光，光的速度是c + 10.<br>没错吧？！ 没错。。</p>
<p>但是，麦克斯韦的上帝方程式给出的结果是：光速是一个常量，不变的。<br>哪里出现问题了？遇到难搞的东西了。<br>猜想：要想光速不变，得有一个参照系。存在“以太”这种介质（无处不在，透明，看不见，摸不着，绝对静止）。<br>就像：一个静静的湖，鱼儿在其中游动却波澜不惊。 湖是以太，地球是鱼儿。<br>光相对于这个参考系的速度是c。<br>但是，麦克斯韦的方程式并没有告诉我们需要针对哪个参照系啊？<br>得证明啊。但是各路英雄豪杰各显神通还是不能证明以太的存在。</p>
<blockquote>
<p>假设1：以太是存在的。<br>假设2：由于以太存在某些性质，人们测量不到。<br>结论：实验测量不到以太。</p>
<p>假设1：以太不存在。<br>结论：实验测量不到以太。<br>既然如此，那么光速是c针对的是哪个参考系？压根不用喽。</p>
</blockquote>
<p>狭义相对论有两条基础假设（这些都是有实验支持的。）：</p>
<blockquote>
<p>1.狭义相对性原理：在所有惯性系，所有物理规律都是一样的。<br>2.光速不变原理：在所有惯性系，真空的光速是一个常数c。</p>
</blockquote>
<p>什么意思？</p>
<blockquote>
<p>狭义相对性原理：不管在静止还是匀速直线行驶的船上，我们看到的所有物理现象都是一样的。我们不能通过观察船上的物理规律来判断船的运动状态。</p>
</blockquote>
<p>光速不变原理：<code>不管在静止还是匀速直线行驶的船上，光速都是c，不变。</code><br>光速不变？这违反常理啊。</p>
<blockquote>
<p>有什么理由保证，我们在这个速度低得可怜的世界总结出来的规律也可以在光速的世界中照用不误。虽然我们在六千千米范围内发现的规律曾经可以描述四十亿千米之外的事情，但这并不代表低俗规律特适用于告诉世界。虽然我们要有将小范围的规律拓展到大尺度疆域的胆识跟尝试，但这终究不是我们探索大自然的唯一跟绝对可信的方法。</p>
</blockquote>
<hr>
<p>听了一分钟什么声音也没有，<br>我想这或许是大师的高妙所在，<br>毕竟我们最需要安安静静倾听内心的声音。</p>
<p>过了一会儿才发现没开声音。</p>
<p>听到声音，有人说，在大海旁。<br>是大海旁吗？我以为是深林溪流边上呢。<br>你觉得是大海就是大海，你觉得是小溪就是小溪。</p>
<hr>
<p>昨晚自卑死了。<br>我把它埋在了山上。<br>开出一朵名叫自信的花。</p>
<hr>
<p>你现在的气质里，<br>藏着你读过的书，走过路，爱过的人。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[弦]]></title>
      <url>http://yoursite.com/2016/07/03/%E5%BC%A6/</url>
      <content type="html"><![CDATA[<p>古代神学依赖的是讲故事的人的智慧解释世界的起源。</p>
<p>后来的科学家在数据少的情况，导致各种理论的数量超过了数据的数量。这就是靠猜吧。虽然常常是错的，但从不被怀疑。</p>
<p>到了今天，利用卫星、激光，重力波探测器跟互联网，革新了我们对宇宙的了解。唉，但压根就没了解。</p>
<a id="more"></a>
<p>如今，能够将原子分裂为电子和原子核，原子核又可以分裂为更小的亚原子粒子。发现的亚原子有几百种，没有一个优雅简单的框架来统一。如此美妙的大自然怎么会在最基本的层次上产生如此多的令人奇异的亚原子粒子群。</p>
<p>后来，M-理论来了。假设我们的仪器不那么渣，我们看到的将不是点粒子，是一小段振动的弦。不同的粒子心脏是不同频率的振动弦。</p>
<p>拨一下弦，改变频率，变成了另一种粒子。再拨一下，再拨一下，这个世界诞生了。</p>
<blockquote>
<p>达尔文说，我相信在遥远将来的人类比起现在将是更加完善的生物，一想到人类和所有其他有知觉的生物在这个长期持续的缓慢过程中注定要完全灭绝，让人不能忍受。</p>
</blockquote>
<p>看来我得赶紧逃离。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[荒谬的宇宙]]></title>
      <url>http://yoursite.com/2016/07/03/%E8%8D%92%E8%B0%AC%E7%9A%84%E5%AE%87%E5%AE%99/</url>
      <content type="html"><![CDATA[<p>其实一开始，我觉得这个爱因斯坦 + 钢铁侠把这世界上所有能装的逼都给装了。<br>今天看书的时候，发现应该把牛顿也加上去。<br><a id="more"></a></p>
<p>在那个彗星划过天空都能充满神话的年代，一颗彗星飘来，吓死一大堆。<br>它从何而来？到何处去？它意味着什么？ </p>
<p>哈雷去问了下牛顿：“什么力可能控制这可彗星的运动？”<br>牛顿平静地说：“这颗彗星沿椭圆运动，这是由与距离平方成反比的力决定的。”<br>哈雷一脸萌比，感动震惊，“你怎么知道？”<br>牛顿说：“什么？我20年前计算出来的。” </p>
<hr>
<p>后来，在哈雷的资助下，《自然哲学的数学原理》得以发表。 </p>
<p>20年前。<br>鼠疫迫使剑桥大学关闭，牛顿回到乡村。<br>一颗苹果掉下。<br>“如果苹果会掉下，那么月亮会不会掉下？” – 天才的基因。 </p>
<p>牛顿发现17世纪的数学不能解决问题的时候，就发明了数学的新分支 – 微积分。<br>后来的事大家都知道。 </p>
<p>在1665 — — 1666年，牛顿搞了万有引力， 牛顿三大定律， 光学， 微积分。<br>这种成就估计真的只有爱因斯坦跟他1905奇迹年才有的一拼吧。 </p>
<p>牛顿想：月亮会不会掉下来。。。<br>爱因斯坦想：如果我以光速去追赶一束光。。。 </p>
<blockquote>
<p>自然和自然规律埋藏在黑暗中，上帝说：让牛顿去发现它！</p>
</blockquote>
<hr>
<p>爱因斯坦让我们知道，舞台跟演员一样重要。<br>一张柔软的床上放着一颗保龄球。<br>然后在扭曲的地方滚一颗小弹珠。 </p>
<p>在遥远的地方看，我们以为小弹珠受到了保龄球的力。<br>走近一看，发现原来床垫已经被扭曲。 </p>
<blockquote>
<p>为什么相对论违背我们的常识，这不是因为相对论是错的，而是因为我们的常识不代表真实。</p>
</blockquote>
<hr>
<p>即使无用，但是有趣。<br>当不去比较，才有可能静下心取得进步。</p>
<blockquote>
<p>如果我正在学习，我才不介意我自己现在有多差。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Learning Concern]]></title>
      <url>http://yoursite.com/2016/07/03/Learning-Concern/</url>
      <content type="html"><![CDATA[<h2 id="Append-feaures"><a href="#Append-feaures" class="headerlink" title="Append_feaures"></a>Append_feaures</h2><blockquote>
<p>When this module is included in another, ruby calls append_features in this module, passing it the receiving module in mod.<br>Ruby’s default implementation to add the constants, methods, and module variables of this module to mod if this module has not  already been added to mod or one of is its ancestors.</p>
</blockquote>
<h2 id="Include-and-Extend"><a href="#Include-and-Extend" class="headerlink" title="Include and Extend"></a>Include and Extend</h2><blockquote>
<p>Module defines the callback “included” and “extended” which are called when a module  is include or extend into another class or module .</p>
</blockquote>
<a id="more"></a>
<ul>
<li>include : Adds to class the instance methods from each module, as instance methods.<ul>
<li>module的类方法不会被引入。</li>
</ul>
</li>
<li>extend : Adds to object the instance methods from each module, as singleton methods.<ul>
<li>class User is a object. =&gt; User.extend(:Auth) =&gt; 属于这User类的单例方法，也可以称作类方法。</li>
<li>user = User.new, user is also is a object. =&gt; user.extend(:Auth) =&gt; 属于这个用户的单例方法。</li>
</ul>
</li>
</ul>
<h2 id="Metaprogramming-with-some-useful-methods"><a href="#Metaprogramming-with-some-useful-methods" class="headerlink" title="Metaprogramming with some useful methods"></a>Metaprogramming with some useful methods</h2><ul>
<li>instance_variables: 可以得到所有实例变量。(@instance*)</li>
<li>instance_variable_defined?: 是否定义了该实例变量。</li>
<li>instance_variable_get: 获取某个实例变量的值。(base.instance_variable_get(:@instance_one))</li>
<li>instance_variable_set: 设置某个实例变量的值。(base.instance_variable_set(:@instance_one, true))</li>
<li>const_defined?: 是否定义该常量，大写开头即是常量。(所以类也是常量，类是可以修改的，所以常量也是可以改变的。)</li>
<li>const_get: 调用某个常量。可以是模块。</li>
</ul>
<h2 id="Concern-is-coming"><a href="#Concern-is-coming" class="headerlink" title="Concern is coming"></a>Concern is coming</h2><p>concern主要能够解决的问题：it gracefully handles module dependencies —— handle the <code>base</code> question.</p>
<p>the example is come from rails code.</p>
<p>如果我们引入一个模块：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#模块一</span></div><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">Foo</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">included</span><span class="params">(base)</span></span></div><div class="line">    base.class_eval <span class="keyword">do</span>  <span class="comment">#打开base类</span></div><div class="line">      <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">method_injected_by_foo</span> <span class="comment">#定义一个类方法，当然，这里可以写其他在单独类文件里可以写的任何东西。</span></span></div><div class="line">        ...</div><div class="line">      <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment">#模块二</span></div><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">Bar</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">included</span><span class="params">(base)</span></span></div><div class="line">    base.method_injected_by_foo</div><div class="line">    <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment">#在一个类中包含模块(第一版)</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Host</span></span></div><div class="line">  <span class="keyword">include</span> Foo</div><div class="line">  <span class="keyword">include</span> Bar  <span class="comment">#这里就存在一个问题，其实，对于调用者来说，是不需要手动调用Foo模块，它完全可以直接包含在Bar模块里面。</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment">#改成这样子</span></div><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">Bar</span></span></div><div class="line">  <span class="keyword">include</span> Foo <span class="comment">#在这里包含进来</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">included</span><span class="params">(base)</span></span></div><div class="line">    base.method_injected_by_foo <span class="comment">#调用上面Foo定义的方法。</span></div><div class="line">    <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment">#在一个类中包含模块(第二版)</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Host</span></span></div><div class="line">  <span class="keyword">include</span> Bar</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment">#可是可惜了，这个暂时不能工作。可以细细分析一下。</span></div><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">Bar</span></span></div><div class="line">  <span class="keyword">include</span> Foo <span class="comment">#问题1在这里, 此时为Foo定义了’method_injected_by_foo’ —- base是’Foo’。</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">included</span><span class="params">(base)</span></span>  <span class="comment">#问题2在这里，此时调用Host的’method_injected_by_foo’ — base是’Host’,之前并没有定义。</span></div><div class="line">    base.method_injected_by_foo <span class="comment">#调用上面Foo定义的方法。</span></div><div class="line">    <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>需要解决的问题主要问题：</p>
<ul>
<li>能不能知道直到最后才确定<code>base</code>,而不是一旦include就马上加载。</li>
<li>由于module的 included 跟 extended的特定模式，所以只能重写喽。</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">Concern</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">extended</span><span class="params">(base)</span></span></div><div class="line">    base.instance_variable_set(“@_dependencies”, [])</div><div class="line">    <span class="comment">#当extend该模块时，会动态创建一个实例变量。</span></div><div class="line">    <span class="comment">#要注意这里为嘛要建立一个这样实例变量？！！！ — —实例变量就是用来存东西。</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">Bar</span></span></div><div class="line">  extend Concern</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">Bar.instance_variables =&gt; [<span class="symbol">:</span>@_dependencies]</div><div class="line">Bar.instance_variable_get(<span class="symbol">:</span>@_dependencies) =&gt; []</div></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">Concern</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">included</span><span class="params">(base = <span class="literal">nil</span>, &amp;block)</span></span>  <span class="comment"># 当被extend， 这个方法会变成一个类方法。</span></div><div class="line">    <span class="keyword">if</span> base.<span class="literal">nil</span>?</div><div class="line">      @_included_block = block <span class="comment"># so make sure included is only one.. this is important.</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">      <span class="keyword">super</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="comment">#override included method, make it can store the block in a instance variable..</span></div><div class="line"><span class="comment">#when base is not passed , the block is stored in @_included_block for later.</span></div><div class="line"><span class="comment">#when base is passed,  delegates to the default implementation.</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">Host</span></span></div><div class="line">  <span class="comment"># as a module , it has itself included and extended.</span></div><div class="line">  <span class="comment"># like Host.included and Host.extended.</span></div><div class="line">  <span class="comment"># they will be callback when is include or extend.</span></div><div class="line"></div><div class="line">  extend ActiveSupport::Concern</div><div class="line">  <span class="comment">#执行上述代码之后，即会把 Concern 里面的included变成类方法加进来， 即变成Host.included.</span></div><div class="line">  <span class="comment">#由于ruby是从头执行的，所以后定义的将会覆盖前面的，即override了默认的方法。</span></div><div class="line"></div><div class="line">  included <span class="keyword">do</span> <span class="comment">#相当于self.included</span></div><div class="line">    ...</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">concern</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">append_features</span><span class="params">(base)</span></span></div><div class="line">    <span class="keyword">if</span> base.instance_variable_defined?(<span class="symbol">:</span>@_dependencies) <span class="comment">#如果包含此变量，则说明需要延迟调用。</span></div><div class="line">      base.instance_variable_get(<span class="symbol">:</span>@_dependencies) &lt;&lt; <span class="keyword">self</span></div><div class="line">      <span class="comment">#注意此时的self，并不是base. 所以很多情况，要十分明确，当前的self究竟是谁。</span></div><div class="line">      <span class="comment">#到这里可以知道，@_dependencies这个实例变量是用来动态存放所要include的module。</span></div><div class="line"></div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    <span class="keyword">else</span> <span class="comment">#如果不包含此变量，则说明是没有 "extend ActiveSupport::Concern”, 表明是到了最终的base,也就是最后include的地方。</span></div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">if</span> base &lt; <span class="keyword">self</span> <span class="comment">#这个地方有点不懂，防止循环依赖么？</span></div><div class="line"></div><div class="line">      @_dependencies.each &#123;<span class="params">|dep|</span> base.send(<span class="symbol">:include</span>, dep)&#125;  <span class="comment">#动态include各个模块。 此处该好好体验ruby中的send.</span></div><div class="line">      <span class="keyword">super</span> <span class="comment">#原本该处理的。 上面跟下面都只是辅助而已.</span></div><div class="line"></div><div class="line">      base.extend const_get(<span class="string">"ClassMethod"</span>) <span class="keyword">if</span> const_defined?(“ClassMethod”) <span class="comment">#动态添加类方法.</span></div><div class="line">      base.class_eval(&amp;@_included_block) <span class="keyword">if</span> instance_variable_get(<span class="symbol">:</span>@_included_block) <span class="comment">#这个即原来self.included里的东西.</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h2 id="Important"><a href="#Important" class="headerlink" title="Important"></a>Important</h2><ul>
<li>先把要执行的code变成一个块存起来。 —— 改写included</li>
<li>有个标记判断是不是最后的base，把之前存起来的代码块一股脑执行。</li>
</ul>
<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ul>
<li><a href="https://ruby-china.org/topics/19812" target="_blank" rel="external">ActiveSupport::Concern 小结</a></li>
<li><a href="http://www.monkeyandcrow.com/blog/reading_rails_concern/" target="_blank" rel="external">Reading Rails - Concern</a></li>
<li><a href="http://www.zhubert.com/blog/2013/06/13/activesupport-concern-digression/" target="_blank" rel="external">ActiveSupport::Concern Digression</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Observer Pattern]]></title>
      <url>http://yoursite.com/2016/07/03/Observer-Pattern/</url>
      <content type="html"><![CDATA[<h2 id="What-is-Observer-Pattern"><a href="#What-is-Observer-Pattern" class="headerlink" title="What is Observer Pattern"></a>What is Observer Pattern</h2><blockquote>
<p>The observer pattern (aka. Dependents, publish/subscribe) is a software design pattern in which an object, called the subject, maintains a list of its dependents, called observers, and notifies them automatically of any state changes, usually by calling one of their methods. It is mainly used to implement distributed event handling systems.</p>
</blockquote>
<ul>
<li>订阅/发布 模式。</li>
<li>当一个对象的状态改变时，那些想知道该对象的变化情况的对象会收到通知。</li>
<li>其中包含一个自己以前一直没在意的细节，我们在某个类中添加一个方法，真的是这个类需要的么？</li>
</ul>
<a id="more"></a>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>想像一种场景：</p>
<ul>
<li>一个老师，确定了某个班级的考试时间。</li>
<li>此时，哪些人应该知道？</li>
<li>学生，秘书，院长等等。</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Professor</span></span></div><div class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:name</span>, <span class="symbol">:class_name</span>, <span class="symbol">:exam_date</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(name, class_name, student, secretary, dean)</span></span></div><div class="line">    @name = name</div><div class="line">    @class = class_name</div><div class="line"></div><div class="line">    @student = student</div><div class="line">    @secretary = secretary</div><div class="line">    @dean = dean</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">set_midterm</span><span class="params">(midterm_date)</span></span></div><div class="line">    @exam_date = midterm_date</div><div class="line">    @student.update(<span class="keyword">self</span>)</div><div class="line">    @secretary.update(<span class="keyword">self</span>)</div><div class="line">    @dean.update(<span class="keyword">self</span>)</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(prof)</span></span></div><div class="line">    puts “I need to start studying <span class="keyword">for</span> Prof. <span class="comment">#&#123;prof.name&#125; exam on the #&#123;prof.exam_date&#125;”</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Secretary</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(prof)</span></span></div><div class="line">    puts “I will find a room <span class="keyword">for</span> the midterm on the <span class="comment">#&#123;prof.exam_date&#125;”</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dean</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(prof)</span></span></div><div class="line">    puts “I will go over the midterm before <span class="comment">#&#123;prof.exam_date&#125;”</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">student = Student.new</div><div class="line">secretary = Secretary.new</div><div class="line">dean = Dean.new</div><div class="line">prof = Professor.new(“Jeff Professor”, “Software Engineering”, student, secretary, dean)</div><div class="line"></div><div class="line">prof.set_midterm(“Oct <span class="number">25</span>th”)</div></pre></td></tr></table></figure>
<p>上面的代码存在一个问题，那就是Professor class承担的 责任太多了。<br>确定一个考试时间，还得一个一个通知相关人士。<br>如果此时，还需要多通知另一个人，那么就得再修改初始化函数。</p>
<p>一种好的方式，是那些想要知道考试时间的人，自行先订阅（也就是监听教授的改变时间）。<br>这样的话，教授就只管设置考试时间，然后那些订阅的人就自动收到考试时间的通知。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Professor</span></span></div><div class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:name</span>, <span class="symbol">:class_name</span>, <span class="symbol">:exam_date</span></div><div class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:observers</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(name, class_name)</span></span></div><div class="line">    @name = name</div><div class="line">    @class = class_name</div><div class="line">    @observers = []</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">set_midterm</span><span class="params">(midterm_date)</span></span></div><div class="line">    notify_observers</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">add_observer</span><span class="params">(observer)</span></span></div><div class="line">    @observers &lt;&lt; observer</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">notify_observers</span></span></div><div class="line">    observers.each <span class="keyword">do</span> <span class="params">|observer|</span></div><div class="line">      observer.update(<span class="keyword">self</span>)</div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">prof.add_observer(student)</div><div class="line">prof.add_observer(secretary)</div><div class="line">prof.add_observer(dean)</div></pre></td></tr></table></figure>
<p>由于发布 — 订阅形式通用的，可以抽出来。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">Subject</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></div><div class="line">    @observers = []</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">add_observer</span><span class="params">(observer)</span></span></div><div class="line">    @observers &lt;&lt; observer</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">delete_observer</span><span class="params">(observer)</span></span></div><div class="line">    @observer.delete(observer)</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">notify_observers</span></span></div><div class="line">    @observers.each <span class="keyword">do</span> <span class="params">|observer|</span></div><div class="line">      observer.update(<span class="keyword">self</span>)</div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Professor</span></span></div><div class="line">  <span class="keyword">include</span> Subject</div><div class="line">  <span class="keyword">attr_reader</span> <span class="symbol">:name</span>, <span class="symbol">:class_name</span>, <span class="symbol">:exam_date</span></div><div class="line">  <span class="keyword">attr_accessor</span> <span class="symbol">:observers</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(name, class_name)</span></span></div><div class="line">    <span class="keyword">super</span>()</div><div class="line">    @name = name</div><div class="line">    @class = class_name</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">set_midterm</span><span class="params">(midterm_date)</span></span></div><div class="line">    notify_observers</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ul>
<li><a href="https://medium.com/@mitchocail/observer-pattern-in-ruby-e80ac3c1dac7#.cpsw0wi4k" target="_blank" rel="external">Observer Pattern in RUBY</a></li>
<li><a href="https://blog.giantmachines.com/2015/12/29/ruby-observer-pattern/" target="_blank" rel="external">Ruby Observer Pattern</a></li>
<li><a href="https://github.com/simlegate/observer/blob/master/lib/observer/observable.rb" target="_blank" rel="external">Ruby Observer</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Learning Rack]]></title>
      <url>http://yoursite.com/2016/07/02/Learning-Rack/</url>
      <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>这几天在看关于rack的知识点，边看边整理。<br>最大的感受就是看技术书会不断地牵扯出新的知识点，不同的人会有不同的理解。 </p>
<p>恍然大悟，生命就该如此。</p>
<h2 id="什么是Rack"><a href="#什么是Rack" class="headerlink" title="什么是Rack?"></a>什么是Rack?</h2><p>我查看wiki：</p>
<blockquote>
<p>Rack provides a modular and adaptable interface for developing web applications in Ruby. By wrapping HTTP requests and responses it unifies the API for web servers, web frameworks, and software in between (the so-called middleware) into a single method call.</p>
</blockquote>
<p>Rack是web server interface，定义了规范。<br>Rack将HTTP requests 和 responses包装好，便于web server 跟 web application之间的调用，一个Rack application可以被任何跟Rack兼容的web server调用。</p>
<a id="more"></a>
<ul>
<li>主流的ruby server都支持Rack接口。（WEBrick, Thin, Unicorn …）</li>
<li>主流的ruby web 框架也都支持。(Rails ,Sinatra, Grape …)</li>
</ul>
<h2 id="这是Rack规范。"><a href="#这是Rack规范。" class="headerlink" title="这是Rack规范。"></a>这是Rack规范。</h2><p><a href="http://www.rubydoc.info/github/rack/rack/master/file/SPEC" target="_blank" rel="external">Rack规范书</a><br>内容不多，定义了一些标准。</p>
<h2 id="什么是Rack-Application"><a href="#什么是Rack-Application" class="headerlink" title="什么是Rack Application?"></a>什么是Rack Application?</h2><p>就是符合Rack规范的程序都是，像Rails, Sinatra这些框架写出来的程序都是啦,如果我们想要自己用ruby写一个，也完全可以。</p>
<p>这是一段有内涵的代码，在后面也会反反复复出现很多很多的次。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myapp</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(env)</span></span></div><div class="line">    [<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span> =&gt; <span class="string">"text/html"</span>&#125;, [<span class="string">"hello world."</span>]]</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">rackapp = Myapp.new</div><div class="line">Rack::Handler::WEBrick.run rackapp, <span class="symbol">:Port</span> =&gt; <span class="number">3000</span></div></pre></td></tr></table></figure></p>
<p>ok,我们已经完成了一个Rack Application了。<br>直接在浏览器访问：<code>http://localhost:3000/</code> ==&gt; <code>&quot;hello world.&quot;</code></p>
<h3 id="如何理解这个过程？"><a href="#如何理解这个过程？" class="headerlink" title="如何理解这个过程？"></a>如何理解这个过程？</h3><p>发送了一个http请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:3000/</div></pre></td></tr></table></figure></p>
<p>返回了这样的响应：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Content-Length: 77</div><div class="line">Content-Type: text/html</div><div class="line">hello world.</div></pre></td></tr></table></figure></p>
<p>Now, say you’re a web server. You have this Rack app loaded in you. And some browser came to you with that request having path ‘/‘. As a server you understand this HTTP request. But you don’t know what to do with it. You have to give it to your Rack app, because it knows very well what to do with such a request.</p>
<p>There is a problem though. Your Rack app does not understand browser requests directly. You need to translate it in a way that he can make sense of it, work with it and then give you a response which you yourself can understand. But the Rack app is kind of a nut-job and doesn’t co-operate easily. So you take the app to a counsellor, to come up with a system.</p>
<p>The counsellor’s name is ‘Rack’. He says, ‘Look Rack app, the server is ready to work together. He’s going to translate the HTTP request in a format that I’ll tell him to. This format will be easy for you to understand. In return, you have to give him a response that he can easily work with. I’ll tell you how your response should look like. Okay?’</p>
<blockquote>
<p>Rack is basically a specification of these two things:</p>
<ul>
<li>what the server should send to the app </li>
<li>what the app should return to the server.</li>
</ul>
</blockquote>
<p>That’s it.</p>
<h3 id="需要符合什么标准呢？"><a href="#需要符合什么标准呢？" class="headerlink" title="需要符合什么标准呢？"></a>需要符合什么标准呢？</h3><p>在规范书里面这样写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">A Rack application is a Ruby object (not a class) that responds to call. It takes exactly one argument, the environment and returns an Array of exactly three values: The status, the headers, and the body.</div></pre></td></tr></table></figure>
<ul>
<li>是一个ruby 对象，不是一个类。</li>
<li>这个对象可以被call调用。</li>
<li>需要接受一个env参数。</li>
<li>需要返回一个数组，包含status + headers + body。</li>
</ul>
<h3 id="what-can-be-call-？"><a href="#what-can-be-call-？" class="headerlink" title="what can be call ？"></a>what can be <code>call</code> ？</h3><p>ruby中，能够响应的call的有几种。  </p>
<ul>
<li>lambda + Proc  </li>
<li>一个类定义了一个叫做call的实例方法。    </li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">lambda &#123;<span class="params">|env|</span> [<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span> =&gt; <span class="string">"text/html"</span>&#125;, [<span class="string">"hello world."</span>]]&#125;</div><div class="line"></div><div class="line"><span class="comment"># or</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myapp</span></span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(env)</span></span></div><div class="line">    [<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span> =&gt; <span class="string">"text/html"</span>&#125;, [<span class="string">"hello world."</span>]]</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h3 id="what-is-the-env"><a href="#what-is-the-env" class="headerlink" title="what is the env ?"></a>what is the <code>env</code> ?</h3><p>如果我访问：<code>http://localhost:3000/search?key=redis</code>,得到的env会类似这样:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">GATEWAY_INTERFACE - CGI/1.1</div><div class="line">HTTP_ACCEPT - text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div><div class="line">HTTP_ACCEPT_ENCODING - gzip, deflate, sdch</div><div class="line">HTTP_ACCEPT_LANGUAGE - zh-CN,zh;q=0.8,en;q=0.6</div><div class="line">HTTP_CONNECTION - keep-alive</div><div class="line">HTTP_HOST - localhost:3000</div><div class="line">HTTP_UPGRADE_INSECURE_REQUESTS - 1</div><div class="line">HTTP_USER_AGENT - Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36</div><div class="line">HTTP_VERSION - HTTP/1.1</div><div class="line">PATH_INFO - /search</div><div class="line">QUERY_STRING - key=redis</div><div class="line">REMOTE_ADDR - ::1</div><div class="line">REMOTE_HOST - ::1</div><div class="line">REQUEST_METHOD - GET</div><div class="line">REQUEST_PATH - /search</div><div class="line">REQUEST_URI - http://localhost:3000/search?key=redis</div><div class="line">SCRIPT_NAME -</div><div class="line">SERVER_NAME - localhost</div><div class="line">SERVER_PORT - 3000</div><div class="line">SERVER_PROTOCOL - HTTP/1.1</div><div class="line">SERVER_SOFTWARE - WEBrick/1.3.1 (Ruby/2.3.0/2015-12-25)</div><div class="line">rack.errors - #&lt;IO:0x007fb9b309eb28&gt;</div><div class="line">rack.hijack - #&lt;Proc:0x007fb9b247fae0@/Users/Don/.rvm/gems/ruby-2.3.0/gems/rack-1.6.4/lib/rack/handler/webrick.rb:76 (lambda)&gt;</div><div class="line">rack.hijack? - true</div><div class="line">rack.hijack_io -</div><div class="line">rack.input - #&lt;StringIO:0x007fb9b247fc20&gt;</div><div class="line">rack.multiprocess - false</div><div class="line">rack.multithread - true</div><div class="line">rack.run_once - false</div><div class="line">rack.url_scheme - http</div><div class="line">rack.version - [1, 3]</div></pre></td></tr></table></figure>
<p>server调用Rack将env传给了app.<br>app是根据这个env来处理用户的请求的，返回对应的响应。env的rack参数规格书里面有说明。</p>
<p>如：会根据<code>PATH_INFO</code>来map路由。</p>
<h3 id="what-is-the-status"><a href="#what-is-the-status" class="headerlink" title="what is the status ?"></a>what is the <code>status</code> ?</h3><h3 id="what-is-the-headers"><a href="#what-is-the-headers" class="headerlink" title="what is the headers ?"></a>what is the <code>headers</code> ?</h3><h3 id="what-is-the-body"><a href="#what-is-the-body" class="headerlink" title="what is the body ?"></a>what is the <code>body</code> ?</h3><p>body是返回的显示结果。配合headers可以被浏览器渲染成不同的东西。<br>body必须可以被each,一般使用字符串的数组。</p>
<h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><p>Rack提供的处理浏览器发来的请求的接口。可以将格式化所传的env.<br>request = Rack::Request.new(env)</p>
<p>获取URL的查询参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">request.params[:search_key]</div></pre></td></tr></table></figure></p>
<p>获取path:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">request.path_info</div></pre></td></tr></table></figure></p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">rack_app = lambda &#123;<span class="params">|env|</span></div><div class="line">  <span class="comment"># 使用Rack的类来进行初始化参数。</span></div><div class="line">  request = Rack::Request.new(env) </div><div class="line">  <span class="keyword">if</span> request.path_info == <span class="string">'/guess'</span></div><div class="line">    <span class="comment"># url?client=xxx</span></div><div class="line">    client = request[<span class="string">"client"</span>]</div><div class="line">    <span class="keyword">if</span> client &amp;&amp; client.downcase == <span class="string">'safari'</span></div><div class="line">      [<span class="number">200</span>, &#123;&#125;, [<span class="string">"yeah, sweet heart!!"</span>]]</div><div class="line">    <span class="keyword">else</span></div><div class="line">      [<span class="number">200</span>, &#123;&#125;, [<span class="string">"please choose another one!!"</span>]]</div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">else</span></div><div class="line">    [<span class="number">200</span>, &#123;&#125;, [<span class="string">"you should choose /guess path!!"</span>]]</div><div class="line">  <span class="keyword">end</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><p>处理返回的结果：</p>
<ul>
<li>直接设置返回结果 response.body, 此时必须自己设置Content-Length的长度。</li>
<li>直接使用response.write, 会自动计算Content-Length的长度。<br>不管用那种方法，最后都调用Response.finish来结束。</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'rack'</span></div><div class="line"></div><div class="line">rack_app = lambda &#123; <span class="params">|env|</span></div><div class="line"></div><div class="line">  request = Rack::Request.new(env)</div><div class="line">  response = Rack::Response.new</div><div class="line"></div><div class="line">  body = <span class="string">"---------header----------&lt;br&gt;"</span></div><div class="line">  <span class="keyword">if</span> request.path_info == <span class="string">"/hello"</span> <span class="comment"># 路由</span></div><div class="line"></div><div class="line">    body &lt;&lt; <span class="string">" you say hello &lt;br&gt;"</span></div><div class="line">    body &lt;&lt; <span class="string">"from <span class="subst">#&#123;client&#125;</span> &lt;br&gt;"</span> <span class="keyword">if</span> client = request[<span class="string">'client'</span>]</div><div class="line"></div><div class="line">  <span class="keyword">else</span></div><div class="line">    body &lt;&lt; <span class="string">"you need enter something.&lt;br&gt;"</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  body &lt;&lt; <span class="string">"---------footer----------&lt;br&gt;"</span></div><div class="line">  body &lt;&lt; <span class="string">"&lt;b&gt;here is bye bye ... &lt;/b&gt;"</span></div><div class="line"></div><div class="line">  response.body = [body]</div><div class="line">  response.header[<span class="string">'Content-Length'</span>] = body.bytesize.to_s</div><div class="line">  response.header[<span class="string">'Content-Type'</span>] = <span class="string">'text/plain'</span></div><div class="line">  response.finish</div><div class="line"></div><div class="line">  <span class="comment"># or</span></div><div class="line">  response.write body</div><div class="line">  response.header[<span class="string">'Content-Type'</span>] = <span class="string">'text/html'</span></div><div class="line"></div><div class="line">  response.finish</div><div class="line">&#125;</div><div class="line"></div><div class="line">Rack::Handler::WEBrick.run rack_app, <span class="symbol">:Port</span> =&gt; <span class="number">3000</span></div></pre></td></tr></table></figure>
<h2 id="中间件-–-middleware"><a href="#中间件-–-middleware" class="headerlink" title="中间件 – middleware"></a>中间件 – middleware</h2><p>中间件可以实现业务逻辑与通用逻辑的分离。而这些通用逻辑可以被不同的业务逻辑使用。</p>
<ul>
<li>中间件而已独立发展。</li>
<li>各种中间件可以根据框架需要自由组合。</li>
</ul>
<h3 id="have-a-look"><a href="#have-a-look" class="headerlink" title="have a look"></a>have a look</h3><p>一个简单的Rack程序，比如上面那个，使用两个中间件middleware1 and middleware2。</p>
<p>可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Rack::Handler::WEBrick.run Middleware1.new(Middleware2.new(rackapp)), :Port =&gt; 3000</div></pre></td></tr></table></figure>
<p>如果使用很多中间件，那这样会变得很难看。顺序也不容易调整。</p>
<p>我们希望可以看到类似下面的结构：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Builder.new <span class="keyword">do</span> </div><div class="line">    use Middleware1</div><div class="line">    use Middleware2</div><div class="line">    run Rack_App</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>这边文章就不单独写代码实现了。在另外一篇文章仔细地写一下如何写出DSL。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[守夜人]]></title>
      <url>http://yoursite.com/2016/07/01/%E5%AE%88%E5%A4%9C%E4%BA%BA/</url>
      <content type="html"><![CDATA[<p>长夜将至，我从今开始守望，至死方休。</p>
<p>我将不娶妻，不封地，不生子。<br>我将不戴宝冠，不争荣宠。<br>我将尽忠职守，生死于斯。</p>
<p>我是黑暗中的利剑，长城上的守卫，抵御寒冷的烈焰，<br>破晓时分的光线，唤醒眠者的号角，守护王国的坚盾。</p>
<p>我将生命与荣耀献给守夜人，今夜如此，夜夜皆然。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ssh免密码登录]]></title>
      <url>http://yoursite.com/2016/07/01/ssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>总是需要登录服务器部署项目。<br>直接使用Terminal来进行ssh连接，<br>每次都要输入ip + port + name + password 好烦。<br>配置一下实现快速登录。</p>
<a id="more"></a>
<h2 id="step-1"><a href="#step-1" class="headerlink" title="step_1"></a>step_1</h2><p>由于可能有多个项目，需要配置一些环境变量。<br>之前都是直接写在<code>~/.bash_profile</code> 或 <code>~/.zshrc</code>。 – – 感觉如果项目一多，会很杂。所以把每个项目的配置抽出来单独一个文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># 比如，我在Work文件夹中创建了一个名为config的新文件夹。</div><div class="line"># 为每个项目创建一个 xx.sh文件：</div><div class="line">ocam.sh</div><div class="line">hive.sh</div><div class="line"></div><div class="line"></div><div class="line"># 然后在`~/.bash_profile` 或 `~/.zshrc` 里把这些项目的配置文件加进来。</div><div class="line">for file in /Work/config/*.sh; do</div><div class="line">  source $file;</div><div class="line">done</div><div class="line"></div><div class="line"># 这样就把每个文件给加进来了。</div><div class="line"># ps:这些配置文件还有个大作用，为每个项目取相应操作的别名。</div></pre></td></tr></table></figure>
<h2 id="step-2"><a href="#step-2" class="headerlink" title="step_2"></a>step_2</h2><p>生成公钥/密钥对</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">cd ~/.ssh</div><div class="line"></div><div class="line"># C是注释，f是文件名（不同项目使用不同的文件名）</div><div class="line">ssh-keygen -t rsa -C ocam -f ocam_id_rsa </div><div class="line"></div><div class="line"># 指定不同服务器使用不同的公钥/密钥对</div><div class="line"># 在ssh_config中配置。（ssh_config不存在新增即可）</div><div class="line"></div><div class="line">Host 111.22.333.44</div><div class="line">PreferredAuthentications publickey</div><div class="line">IdentityFile ~/.ssh/ocam_id_rsa</div><div class="line">Port 99</div></pre></td></tr></table></figure>
<h2 id="step-3"><a href="#step-3" class="headerlink" title="step_3"></a>step_3</h2><p>将生成的<code>公钥</code>放到服务器。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat ~/.ssh/ocam_id_rsa.pub | ssh -t root@111.22.333.44 -p 99 &apos;cat &gt;&gt; .ssh/authorized_keys&apos;</div></pre></td></tr></table></figure>
<h2 id="step-4"><a href="#step-4" class="headerlink" title="step_4"></a>step_4</h2><p>在第一步创建的ocam.sh中,添加进入服务器的命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">alias ocam_test_server=&quot;ssh -t root@111.22.333.44 -p 99&quot;</div><div class="line"></div><div class="line">PS:</div><div class="line">使用简单易记的命令来代替复杂的命令。</div><div class="line">比如：启动redis实例， 启动webpack</div><div class="line">alias ocam_js=&quot;sh Work/ocam/run_script.sh&quot; # webpack</div><div class="line">alias ocam_db=&quot;sh Work/ocam/run_db_script.sh&quot; # 重置数据库</div><div class="line">alias ocam_redis=&quot;sh Work/ocam/run_redis_script.sh&quot; # 启动redis实例</div></pre></td></tr></table></figure></p>
<h2 id="step-5"><a href="#step-5" class="headerlink" title="step_5"></a>step_5</h2><p>以后如果要登录某个项目的服务器，直接打开Terminal, 执行<code>ocam_test_server</code>就可以了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Day-4-17]]></title>
      <url>http://yoursite.com/2016/04/17/Day-4-17/</url>
      <content type="html"><![CDATA[<p>突然的，又无从下笔。<br>白天看到每一件事都有好多想法，现在回想起来就模模糊糊。</p>
<p><strong>每天晚上这静静的一个小时，我让今天留下了什么？</strong></p>
<a id="more"></a>
<h2 id="About-Thinking"><a href="#About-Thinking" class="headerlink" title="About Thinking"></a>About Thinking</h2><h3 id="感觉"><a href="#感觉" class="headerlink" title="感觉"></a>感觉</h3><p>一种感觉，透彻心扉。<br>那天，欧冠8强第二回合，巴萨输给马竞。在比赛结束哨声响起，一整场期待能够拿下比赛的祈祷，全部落入深渊。<br>一个人坐着，有那么一瞬间，接受不了。仿佛被全世界抛弃。这是我觉得最孤独的一秒钟。</p>
<h3 id="一首喜欢的"><a href="#一首喜欢的" class="headerlink" title="一首喜欢的"></a>一首喜欢的</h3><blockquote>
<p>一别都门三改火，天涯踏尽红尘。<br>依然一笑作春温。<br>无波真古井，有节是秋筠。</p>
<p>惆怅孤帆连夜发，送行淡月微云。<br>尊前不用翠眉颦。<br>人生如逆旅，我亦是行人。</p>
</blockquote>
<h3 id="时刻铭记"><a href="#时刻铭记" class="headerlink" title="时刻铭记"></a>时刻铭记</h3><blockquote>
<p>当你不知道干什么的时候，读书或者健身。</p>
</blockquote>
<h2 id="About-Love"><a href="#About-Love" class="headerlink" title="About Love"></a>About Love</h2><p>小娜跟我说过这么一句话：你不是书读的少，是经典的读的少。<br>然后，总是时不时觉得有点慌，一种自己太无知的慌。</p>
<h3 id="休息"><a href="#休息" class="headerlink" title="休息"></a>休息</h3><p>我家小娜要连续上好几天班，嗯，这个周末也没有放假。最怕最怕的就是她太累。<br>发信息给她，在睡觉。很是欣慰。</p>
<blockquote>
<p><strong>当一个人愿意花时间去休息好，才是懂的珍惜时间的。</strong>  </p>
</blockquote>
<h3 id="跑步"><a href="#跑步" class="headerlink" title="跑步"></a>跑步</h3><p>睡了一会，小娜就去跑步了。加油哦。希望你能爱上跑步的感觉，就如我爱上足球一样。<br>看来，当成为习惯时，以后要吃什么就去吃什么，不用顾虑了。</p>
<h3 id="五一"><a href="#五一" class="headerlink" title="五一"></a>五一</h3><p>我家小娜五一没放假。已经很久没看到你了。放心，五一就去陪你。勿担心。</p>
<h2 id="About-Friend"><a href="#About-Friend" class="headerlink" title="About Friend"></a>About Friend</h2><h3 id="叼哥帮忙找视频"><a href="#叼哥帮忙找视频" class="headerlink" title="叼哥帮忙找视频"></a>叼哥帮忙找视频</h3><p>最近想找之前大一新生杯比赛时的点球视频。忘记名字了，找不到。让叼人帮忙找，最后终于找到了。 哇，谢叼哥，欠你个大鸡腿。</p>
<p>闲聊几句，说是每晚加班到12点，甚是辛苦。哎，注意身体。</p>
<h3 id="小芋头"><a href="#小芋头" class="headerlink" title="小芋头"></a>小芋头</h3><p>跟小芋头去看了《奇幻森林》。</p>
<p>看完电影，去吃牛肉火锅。貌似，我很少吃这种东西。一开始，有点等不及，那种很有食欲的感觉，让我自己都难以相信。</p>
<p>是不是这就是吃货每天的感觉。？如果真的是，我觉得吃货是可以原谅的。<br>当然，最后还是难以避免的结局，饱到想吐。</p>
<blockquote>
<p><strong>三餐这么重要，怎可不用心对待！</strong></p>
</blockquote>
<h3 id="龙兄"><a href="#龙兄" class="headerlink" title="龙兄"></a>龙兄</h3><p>在外奔波了2个月，回到广州。每次带回来都给我带来一大堆特产，这次是新疆的葡萄干。</p>
<p>谢龙兄。</p>
<h2 id="About-Other"><a href="#About-Other" class="headerlink" title="About Other"></a>About Other</h2><h3 id="大一新生杯视频"><a href="#大一新生杯视频" class="headerlink" title="大一新生杯视频"></a>大一新生杯视频</h3><p>那时正是大一时。 – 《<a href="http://v.youku.com/v_show/id_XMzI0MzM0Nzg4.html?from=s1.8-1-1.2" target="_blank" rel="external">广工最犀利门神</a>》</p>
<h3 id="一篇值得思考的文章"><a href="#一篇值得思考的文章" class="headerlink" title="一篇值得思考的文章"></a>一篇值得思考的文章</h3><p>《<a href="https://mp.weixin.qq.com/s?__biz=MjM5ODgwODY2MA==&amp;mid=2736769554&amp;idx=1&amp;sn=e9239e307e64dc22aca47b95730b050c&amp;scene=1&amp;srcid=0417QuSX25WXES7TpuaHNnRN&amp;key=b28b03434249256b8938cd9c43e23af64d664763efbbe362219e4ae5ce9620bc3fbe89725d70b296f76de022d4626723&amp;ascene=0&amp;uin=MTIyMDM0MTgwNA==&amp;devicetype=iMac%20MacBookPro12,1%20OSX%20OSX%2010.10.4%20build%2814E46%29&amp;version=11020201&amp;pass_ticket=Bhmy2ukQgfaK%2b0g3ddPnmkUJvg4jaACUe5DTTd10Yu1jSQDAUM7KIgDUXZHhoYrz" target="_blank" rel="external">人为什么活着</a>》。<br>很多时候，自己都没去思考，没去想一想，生活生命究竟是什么。<br>总是被每天的琐碎迷惑，摆脱不已。没有真正的思考。</p>
<h3 id="拒绝"><a href="#拒绝" class="headerlink" title="拒绝"></a>拒绝</h3><p>不懂得拒绝的人，即使把自己累死，也不会得到别人真正的尊重。因为在那些习惯麻烦你的人眼里，你帮别人也都帮了，又不是只帮他一个。</p>
<h2 id="About-Laugh"><a href="#About-Laugh" class="headerlink" title="About Laugh"></a>About Laugh</h2><p>三岁女儿： 以后我肚子是不是也会有宝宝？<br>爸爸：    如果你愿意的话。<br>三岁女儿： 不了吧，肚子是留来装糖果的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Day-2-20]]></title>
      <url>http://yoursite.com/2016/02/20/Day-2-20/</url>
      <content type="html"><![CDATA[<h2 id="one（去了1200bookshop）"><a href="#one（去了1200bookshop）" class="headerlink" title="one（去了1200bookshop）"></a>one（去了1200bookshop）</h2><p>跟龙兄晃悠晃悠地来到了广州的不打烊书店。一路期待与欣喜。<br>门店不大，一入门，两边放着诗歌 跟 哲学书，这个，格调有点高了吧。</p>
<p>正面就是一条往上的楼梯，旁边放着书。<br>ps：这种感觉太好了，一直很喜欢这种随地放置书籍的布置感。</p>
<p>一上楼梯，一股浓浓的咖啡味扑鼻而来。<br>原来，咖啡也可以是这么好闻的。</p>
<a id="more"></a>
<p>书籍不算多，工作人员说还有一家大很多的分店。<br>但是还是能够我满足玩逛书的心情的。</p>
<p>挑着书，翻着书。<br>我将如何去为我的书安家？</p>
<p>小小书屋，给广州带来又一处文艺青年的安身之处。<br>谢谢1200bookshop。</p>
<p>核心：为背包客提供一个安身之处。</p>
<h2 id="two"><a href="#two" class="headerlink" title="two"></a>two</h2><p>阿西莫夫跟达芬奇一样，都是全能型的超级人物。得找找他们的事迹。<br>《基地》中，每一个国家，总是在看起来国势最盛多时候，开始埋下衰败的种子。<br>使这个国家强盛的理由，有时恰恰也是使它失败的原因。</p>
<h2 id="three"><a href="#three" class="headerlink" title="three"></a>three</h2><p>生命本来就像圆周率一样无穷无尽，任何形式都容纳不下它。<br>找个时间，重新看看《少年派的奇幻漂流》。</p>
<h2 id="four"><a href="#four" class="headerlink" title="four"></a>four</h2><p>犹豫不定时，就挑比较困难的那件事吧。即使失败，也是完成一次挑战，历练了自己。<br>幸福时要时时分享的。<br>今天你真的守护你决定最重要的事情了么？</p>
<h2 id="five（小林一茶）"><a href="#five（小林一茶）" class="headerlink" title="five（小林一茶）"></a>five（小林一茶）</h2><p>小林一茶。<br>坎坷的一生。<br>3岁丧母，后又被继母赶出家门，61岁时小他20岁的妻子早逝，65岁时家屋连同财产尽付一炬。<br>最悲惨的是他的四个孩子，全部夭折。</p>
<blockquote>
<p>我知这世界，本如露水般短暂。<br>然而。<br>然而。    </p>
</blockquote>
<p>这是我见过，最难受的三句话。</p>
<h2 id="six（《月亮与六便士》）"><a href="#six（《月亮与六便士》）" class="headerlink" title="six（《月亮与六便士》）"></a>six（《月亮与六便士》）</h2><p>今天，算是认识到毛姆大叔了。</p>
<blockquote>
<p>只有诗人或圣徒，<br>才会坚定不移地相信，<br>在沥青路上浇水，<br>能种出百合花来。</p>
</blockquote>
]]></content>
    </entry>
    
  
  
</search>
